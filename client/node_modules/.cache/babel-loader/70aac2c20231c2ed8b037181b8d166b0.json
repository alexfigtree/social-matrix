{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/GitHub/social-matrix/client/src/components/Form/CheckboxField.js\";\nimport React, { useState, setState } from 'react';\nimport { FormGroup, Checkbox } from '@material-ui/core';\n\nfunction CheckboxField(props) {\n  const [currentData, setCurrentData] = React.useState([]);\n  const [limit, setLimit] = React.useState(2);\n  const [checked, setChecked] = React.useState(true);\n\n  const selectData = event => {\n    console.log(\"hey this is checked\", event);\n    console.log(\"with value\", event.target.value);\n    let isSelected = event.currentTarget.checked;\n\n    if (isSelected) {\n      if (currentData < limit) {\n        setState({\n          currentData: currentData + 1\n        });\n      } else {\n        event.preventDefault();\n        event.currentTarget.checked = false;\n      }\n    } else {\n      setState({\n        currentData: currentData - 1\n      });\n    }\n\n    ;\n    setChecked(event.target.checked);\n  };\n  /*  const selectData = React.useCallback(\n      (event) => {\n        console.log(\"hey this is checked\", event.target.checked);\n        console.log(\"with value\", event.target.value);\n        let isSelected = event.currentTarget.checked;\n        if (isSelected) {\n          if (currentData < limit) {\n            setState({ currentData: currentData+1 });\n          }else{\n            event.preventDefault()\n            event.currentTarget.checked = false;\n          }\n        } else {\n          setState({currentData: currentData - 1});\n        };\n  \n        setChecked(event.target.checked);\n      },\n      [], // Tells React to memoize regardless of arguments.\n    );*/\n\n\n  const shouldDisableCheckbox = (value, checked) => {\n    // either from props: const { maxAllowed } = this.props\n    // or from state: const { maxAllowed } = this.state\n    // or just a constant:\n    console.log('shouldDisableCheckbox called with checked value of', checked); //const value = event.target.value;\n\n    const maxAllowed = 2; //const { checked } = React.useState(true);\n\n    return checked.length >= maxAllowed && checked.indexOf(value) === -1;\n  };\n\n  const result = new Set();\n\n  const handleCheckbox = (event, isChecked, value) => {\n    console.log(isChecked, value);\n    result.add(value);\n    if (result.size === 3) console.log(result);\n  };\n\n  const handleChange = event => {\n    console.log(\"hey this is checked\", event.target.checked);\n    console.log(\"with value\", event.target.value);\n    setChecked(event.target.checked);\n  };\n\n  const labelList = [{\n    id: 1,\n    category: 'a'\n  }, {\n    id: 2,\n    category: 'b'\n  }, {\n    id: 3,\n    category: 'c'\n  }]; // your data\n\n  return /*#__PURE__*/React.createElement(FormGroup, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, labelList.map(element => /*#__PURE__*/React.createElement(CheckboxField, {\n    key: element.id,\n    label: element.category,\n    category: element.category,\n    onChange: handleCheckbox(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })));\n}\n\n;\nexport default CheckboxField;","map":{"version":3,"sources":["/Users/alex/Documents/GitHub/social-matrix/client/src/components/Form/CheckboxField.js"],"names":["React","useState","setState","FormGroup","Checkbox","CheckboxField","props","currentData","setCurrentData","limit","setLimit","checked","setChecked","selectData","event","console","log","target","value","isSelected","currentTarget","preventDefault","shouldDisableCheckbox","maxAllowed","length","indexOf","result","Set","handleCheckbox","isChecked","add","size","handleChange","labelList","id","category","flexDirection","map","element"],"mappings":"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","sourcesContent":["import React, { useState, setState } from 'react';\nimport { FormGroup, Checkbox } from '@material-ui/core';\n\nfunction CheckboxField(props) {\n  const [currentData, setCurrentData] = React.useState([]);\n  const [limit, setLimit] = React.useState(2);\n  const [checked, setChecked] = React.useState(true);\n\n  const selectData = (event) => {\n      console.log(\"hey this is checked\", event);\n      console.log(\"with value\", event.target.value);\n      let isSelected = event.currentTarget.checked;\n      if (isSelected) {\n        if (currentData < limit) {\n          setState({ currentData: currentData+1 });\n        }else{\n          event.preventDefault()\n          event.currentTarget.checked = false;\n        }\n      } else {\n        setState({currentData: currentData - 1});\n      };\n\n      setChecked(event.target.checked);\n  };\n\n/*  const selectData = React.useCallback(\n    (event) => {\n      console.log(\"hey this is checked\", event.target.checked);\n      console.log(\"with value\", event.target.value);\n      let isSelected = event.currentTarget.checked;\n      if (isSelected) {\n        if (currentData < limit) {\n          setState({ currentData: currentData+1 });\n        }else{\n          event.preventDefault()\n          event.currentTarget.checked = false;\n        }\n      } else {\n        setState({currentData: currentData - 1});\n      };\n\n      setChecked(event.target.checked);\n    },\n    [], // Tells React to memoize regardless of arguments.\n  );*/\n\n  const shouldDisableCheckbox = (value, checked) => {\n   // either from props: const { maxAllowed } = this.props\n   // or from state: const { maxAllowed } = this.state\n   // or just a constant:\n   console.log('shouldDisableCheckbox called with checked value of', checked);\n   //const value = event.target.value;\n   const maxAllowed = 2;\n   //const { checked } = React.useState(true);\n   return checked.length >= maxAllowed && checked.indexOf(value) === -1\n};\n\n  const result = new Set();\n\n  const handleCheckbox = (event, isChecked, value) => {\n    console.log(isChecked, value); \n    result.add(value);\n    if (result.size === 3) console.log(result);\n  };\n\n const handleChange = (event) => {\n    console.log(\"hey this is checked\", event.target.checked);\n    console.log(\"with value\", event.target.value);\n    setChecked(event.target.checked);\n  };\n\n  const labelList = [{id: 1, category: 'a'}, {id: 2, category: 'b'}, {id: 3, category: 'c'}]; // your data\n\n    return (\n\n      <FormGroup style={{flexDirection: 'row'}}>\n\n          {labelList.map(element => (\n            <CheckboxField\n              key={element.id}\n              label={element.category}\n              category={element.category}\n              onChange={handleCheckbox()}\n            />\n          ))}\n          \n\n        </FormGroup>\n    );\n};\n\nexport default CheckboxField;"]},"metadata":{},"sourceType":"module"}